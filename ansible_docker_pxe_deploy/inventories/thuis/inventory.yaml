---
all:
  vars:
    docker_deploy:
      volume_pxe: "/home/opvolger/pxe/volume_pxe"
      dir: "/home/opvolger/pxe"
      remove_old_dirs: false
    wimboot:
      generate: false
      download_with_samba: true
      background_jpg: http://opvolger.net/winpe.jpg
    boot_ipxe:
      ip_address: "192.168.2.17"
      dhcp_range_for_pxe_boot: "192.168.2.0"
      # background_png: https://pc-freak.net/penguins/tux-003-1024x768.png
      background_png: https://github.com/bradgillap/IPXEBOOT/raw/master/boot.png
      samba: "{{ samba }}"
      nfs: "{{ nfs }}"
      menu_default: disk
      menu_os_items:
        linux:
          - name_item: slax_64
            name_os: slax
            version: "9.11.0"
            arch: amd64
            iso:
              download: http://ftp.sh.cvut.cz/slax/Slax-9.x/slax-64bit-9.11.0.iso
              boot_from_iso: yes
              bootfiles:
                - slax/boot/vmlinuz
                - slax/boot/initrfs.img
            key: s
            text: (s) Boot Slax 9.11.0 (64) (from http/iso)
            boot_commands:
              - kernel ${http_location}/vmlinuz vga=normal load_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 consoleblank=0 slax.flags=perch,automount from=http://${ipxe_server_ip}/iso/slax-64bit-9.11.0.iso
              - initrd ${http_location}/initrfs.img
          - name_item: slax_32
            name_os: slax
            version: "9.11.0"
            arch: x84
            iso:
              download: http://ftp.sh.cvut.cz/slax/Slax-9.x/slax-32bit-9.11.0.iso
              boot_from_iso: yes
              bootfiles:
                - slax/boot/vmlinuz
                - slax/boot/initrfs.img
            key: d
            text: (d) Boot Slax 9.11.0 (32) (from http/iso)
            boot_commands:
              - kernel ${http_location}/vmlinuz vga=normal load_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 consoleblank=0 slax.flags=perch,automount from=http://${ipxe_server_ip}/iso/slax-32bit-9.11.0.iso
              - initrd ${http_location}/initrfs.img
          - name_item: gparted_64
            name_os: gparted
            version: "1.1.0-5"
            arch: amd64
            iso:
              download: http://www.cs.tohoku-gakuin.ac.jp/pub/Linux/GParted/gparted-live-1.1.0-5-amd64.iso
              bootfiles:
                - live/vmlinuz
                - live/initrd.img
                - live/filesystem.squashfs
            key: g
            text: (g) Boot Gparted 1.1.0-5 (64) (from http/squashfs)
            boot_commands:
              - kernel ${http_location}/vmlinuz boot=live config components union=overlay username=user noswap noeject ip=dhcp vga=788 fetch=${http_location}/filesystem.squashfs
              - initrd ${http_location}/initrd.img
          - name_item: gparted_32
            name_os: gparted
            version: "1.1.0-5"
            arch: x86
            iso:
              download: http://www.cs.tohoku-gakuin.ac.jp/pub/Linux/GParted/gparted-live-1.1.0-5-i686.iso
              bootfiles:
                - live/vmlinuz
                - live/initrd.img
                - live/filesystem.squashfs
            key: h
            text: (h) Boot Gparted 1.1.0-5 (32) (from http/squashfs)
            boot_commands:
              - kernel ${http_location}/vmlinuz boot=live config components union=overlay username=user noswap noeject ip=dhcp vga=788 fetch=${http_location}/filesystem.squashfs
              - initrd ${http_location}/initrd.img
          - name_item: ubuntu
            name_os: ubuntu
            version: "20.04.1"
            arch: amd64
            iso:
              download: https://releases.ubuntu.com/20.04/ubuntu-20.04.1-desktop-amd64.iso
              extract_to: samba
              bootfiles:
                - casper/vmlinuz
                - casper/initrd
            key: u
            text: (u) Boot Ubuntu 20.04.1 (64) (from samba)
            boot_commands:
              - kernel ${http_location}/vmlinuz showmounts toram root=/dev/cifs boot=casper netboot=cifs nfsroot=${samba_location}  NFSOPTS=-ouser=${samba_username},pass=${samba_password} ip=dhcp ro
              - initrd ${http_location}/initrd
          - name_item: ubuntu2
            name_os: ubuntu
            version: "20.04.1"
            arch: amd64
            # no iso here, because it already comes with the item above
            key: "2"
            text: (2) Boot Ubuntu 20.04.1 (64) (from nfs)
            boot_commands:
              - kernel ${http_location}/vmlinuz showmounts toram boot=casper root=/dev/nfs netboot=nfs nfsroot=${nfs_location} NFSOPTS=vers=3 ip=dhcp
              - initrd ${http_location}/initrd
          - name_item: manjaro_kde_64
            name_os: manjaro
            version: "20.04.1"
            arch: amd64
            iso:
              download: https://osdn.net/projects/manjaro/storage/kde/20.1/manjaro-kde-20.1-200911-linux58.iso
              extract_to: nfs
              bootfiles:
                - boot/vmlinuz-x86_64
                - boot/intel_ucode.img
                - boot/amd_ucode.img
                - boot/initramfs-x86_64.img
            # no iso here, because it already comes with the item above
            key: "m"
            text: (m) Boot Manjaro 20.1 (64) (from nfs)
            boot_commands:
            # https://wiki.archlinux.org/index.php/Preboot_Execution_Environment#Transferring_archiso_root_filesystem
            # https://github.com/manjaro/manjaro-tools/issues/84
              - kernel ${http_location}/vmlinuz-x86_64 archisobasedir=manjaro archiso_nfs_srv=${nfs_location} ip=dhcp # ip=192.168.2.120:192.168.2.17:192.168.2.254:255.255.255.0::eth0:off nameserver=192.168.2.254
              #- kernel ${http_location}/vmlinuz-x86_64 archisobasedir=manjaro archiso_http_srv=${nfs_location} ip=192.168.2.120:192.168.2.17:192.168.2.254:255.255.255.0::eth0:off nameserver=192.168.2.254
              - initrd ${http_location}/intel_ucode.img 
              - initrd ${http_location}/amd_ucode.img 
              - initrd ${http_location}/initramfs-x86_64.img
        windows:
          - name_item: windows10setup
            name_os: windows
            version: "10_home_pro_en"
            arch: amd64
            iso:
              name: Windows.iso
              extract_to: samba
            key: w
            text: (w) Boot Windows 10 Setup (from samba)
            boot_commands:
              - cpuid --ext 29 && set arch amd64 || set arch x86
              - kernel http://${ipxe_server_ip}/ipxe/wimboot
              - initrd ${http_location}/winpeshl.ini                                  winpeshl.ini
              - initrd ${http_location}/startup.ps1                                   startup.ps1
              - initrd http://${ipxe_server_ip}/winpe/${arch}/media/Boot/BCD          BCD
              - initrd http://${ipxe_server_ip}/winpe/${arch}/media/Boot/boot.sdi     boot.sdi
              - initrd http://${ipxe_server_ip}/winpe/${arch}/media/sources/boot.wim  boot.wim
    # samba and nfs on the same nas
    nas:
      hostname: "192.168.2.13"
      share: "boot"
      username: "boot"
      password: !vault |
        $ANSIBLE_VAULT;1.2;AES256;thuis
        37666133336534363836323032623236643537366338383739353561666332633730366365386632
        6338313233313433616136303939333236633866313632390a613038393362326235343133383364
        61626237313563333362376465376361326635316337376333373265663763393032306337316431
        6237373131326534300a353438646436386535333461643738323062323263653438346534363835
        3864
    nfs:
      hostname: "{{ nas.hostname }}"
      share: "/volume1/{{ nas.share }}"
    samba:
      hostname: "{{ nas.hostname }}"
      share: "{{ nas.share }}"
      username: "{{ nas.username }}"
      password: "{{ nas.password }}"
  children:
    deploy:
      hosts:
        "192.168.2.17":
    windows_adk:
      hosts:
        "192.168.2.38":
